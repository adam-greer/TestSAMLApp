const express = require('express');
const session = require('express-session');
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const SamlStrategy = require('passport-saml').Strategy;
const fs = require('fs');
const path = require('path');
const bodyParser = require('body-parser');
const flash = require('connect-flash');
const expressLayouts = require('express-ejs-layouts');
const crypto = require('crypto');
const forge = require('node-forge');
const { generateServiceProviderMetadata } = require('passport-saml-metadata');
const app = express();

// === Config constants ===
const PORT = process.env.PORT || 3000;
const CONFIG_PATH = path.join(__dirname, 'admin', 'saml-config.json');
const CERT_PATH = path.join(__dirname, 'cert.pem');
const KEY_PATH = path.join(__dirname, 'key.pem');

// === Middleware & View Engine Setup ===
app.set('view engine', 'ejs');
app.use(expressLayouts);
app.set('layout', 'layout');

app.use(express.static(path.join(__dirname, 'public')));
app.use(bodyParser.urlencoded({ extended: false }));

app.use(session({
  secret: 'keyboard cat saml training',
  resave: false,
  saveUninitialized: false,
}));

app.use(passport.initialize());
app.use(passport.session());
app.use(flash());

app.use((req, res, next) => {
  res.locals.title = 'MyApp'; // default title
  next();
});

// === Globals for SAML ===
let samlConfig = null;
let samlEnabled = false;
let samlStrategy = null;

// === User Data (In-memory for demo) ===
const localUsers = [
  {
    id: 1,
    username: 'admin',
    password: 'password',
    displayName: 'Admin User',
    firstName: 'Admin',
    lastName: 'User',
    email: 'admin@example.com',
    manager: '',
    title: 'Administrator',
    authType: 'local',
    isAdmin: true,
  },
];

// === Passport Local Strategy ===
passport.use(new LocalStrategy((username, password, done) => {
  const user = localUsers.find(u => u.username === username && u.password === password);
  if (!user) {
    return done(null, false, { message: 'Invalid credentials' });
  }
  return done(null, user);
}));

// === Load SAML Config & Setup Strategy ===
function loadSamlConfig() {
  try {
    const raw = fs.readFileSync(CONFIG_PATH, 'utf-8');
    const cfg = JSON.parse(raw);
    if (cfg.cert && cfg.entryPoint && cfg.issuer && cfg.callbackUrl) {
      samlEnabled = true;
      samlConfig = cfg;
      console.log('SAML config loaded, SAML login enabled');
      setupSamlStrategy();
    } else {
      samlEnabled = false;
      console.warn('SAML config missing required fields or cert, SAML login disabled');
    }
  } catch (err) {
    samlEnabled = false;
    console.warn('Could not load SAML config, SAML login disabled:', err.message);
  }
}

function setupSamlStrategy() {
  if (!samlConfig) return;
  if (samlStrategy) {
    passport.unuse('saml');
  }
  samlStrategy = new SamlStrategy({
    entryPoint: samlConfig.entryPoint,
    issuer: samlConfig.issuer,
    callbackUrl: samlConfig.callbackUrl,
    cert: samlConfig.cert,
  }, (profile, done) => {
    const user = {
      id: profile.nameID,
      username: profile.nameID,
      email: profile[samlConfig.attributes?.email] || '',
      firstName: profile[samlConfig.attributes?.firstName] || '',
      lastName: profile[samlConfig.attributes?.lastName] || '',
      displayName: profile[samlConfig.attributes?.displayName] || '',
      manager: profile[samlConfig.attributes?.manager] || '',
      title: profile[samlConfig.attributes?.title] || '',
      authType: 'saml',
      samlAssertion: profile._raw || '',
      isAdmin: false,
    };
    return done(null, user);
  });
  passport.use('saml', samlStrategy);
}

loadSamlConfig();

// === Passport Serialization ===
passport.serializeUser((user, done) => {
  done(null, { id: user.id, username: user.username });
});

passport.deserializeUser((obj, done) => {
  const user = localUsers.find(u => u.id === obj.id) || obj;
  done(null, user);
});

// === Helper Middleware ===
function ensureLoggedIn(req, res, next) {
  if (req.isAuthenticated()) return next();
  res.redirect('/login');
}

function ensureAdmin(req, res, next) {
  if (req.isAuthenticated() && req.user?.isAdmin) return next();
  res.status(403).send('Forbidden - Admins only');
}

// === Global Template Variables & Gravatar ===
app.use((req, res, next) => {
  res.locals.user = req.user || null;
  res.locals.isAdmin = req.user?.isAdmin || false;
  res.locals.messages = req.flash();

  if (req.user && req.user.email) {
    const md5 = crypto.createHash('md5').update(req.user.email.trim().toLowerCase()).digest('hex');
    res.locals.user.avatar = `https://www.gravatar.com/avatar/${md5}?d=identicon`;
  } else if (res.locals.user) {
    res.locals.user.avatar = 'https://www.gravatar.com/avatar?d=identicon';
  }
  next();
});

// === Routers ===
// Import routers AFTER app and middleware setup
const authRouter = require('./routes/auth');
const adminRouter = require('./routes/admin');

app.use('/', authRouter);
app.use('/admin', adminRouter);

// === SAML Metadata Route ===
app.get('/saml/metadata', (req, res) => {
  if (!samlConfig || !samlConfig.cert) return res.status(500).send('SAML not configured');

  const metadata = generateServiceProviderMetadata(
    samlConfig.callbackUrl,
    samlConfig.cert
  );

  res.type('application/xml').send(metadata);
});

// === Admin: SAML Config Editor ===
app.get('/admin/saml-config', ensureLoggedIn, ensureAdmin, (req, res) => {
  let configText = '{}';
  let config = {};
  try {
    configText = fs.readFileSync(CONFIG_PATH, 'utf-8');
    config = JSON.parses(configtext);
  } catch {
    // ignore if file missing
  }
  res.render('admin-saml-config', { title: 'Edit SAML Config', configText });
});

app.post('/admin/saml-config', ensureLoggedIn, ensureAdmin, (req, res) => {
  const configText = req.body.configText || '{}';
  try {
    JSON.parse(configText); // validate JSON
    fs.writeFileSync(CONFIG_PATH, configText, 'utf-8');
    loadSamlConfig(); // reload after save
    req.flash('success', 'SAML config saved successfully.');
  } catch (err) {
    req.flash('error', 'Invalid JSON format: ' + err.message);
  }
  res.redirect('/admin/saml-config');
});

// === Admin: Generate Cert + Key ===
app.post('/admin/saml/generate-cert', ensureLoggedIn, ensureAdmin, (req, res) => {
  try {
    const pki = forge.pki;
    const keys = pki.rsa.generateKeyPair(2048);
    const cert = pki.createCertificate();

    cert.publicKey = keys.publicKey;
    cert.serialNumber = '01';
    cert.validity.notBefore = new Date();
    cert.validity.notAfter = new Date();
    cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 2);

    const attrs = [{ name: 'commonName', value: 'TestSAMLApp' }];
    cert.setSubject(attrs);
    cert.setIssuer(attrs);
    cert.sign(keys.privateKey);

    const certPem = pki.certificateToPem(cert);
    const keyPem = pki.privateKeyToPem(keys.privateKey);

    fs.writeFileSync(CERT_PATH, certPem);
    fs.writeFileSync(KEY_PATH, keyPem);

    const config = JSON.parse(fs.readFileSync(CONFIG_PATH, 'utf8'));
    config.cert = certPem;
    fs.writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2));

    res.redirect('/admin/saml-config');
  } catch (err) {
    console.error('Error generating cert:', err);
    res.status(500).send('Failed to generate cert');
  }
});

// === Start Server ===
app.listen(PORT, () => {
  console.log(`TestSAMLApp running on http://localhost:${PORT}`);
});

